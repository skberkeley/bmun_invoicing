package invoice_automation;

import com.intuit.ipp.core.Context;
import com.intuit.ipp.core.ServiceType;
import com.intuit.ipp.data.Customer;
import com.intuit.ipp.exception.FMSException;
import com.intuit.ipp.security.OAuth2Authorizer;
import com.intuit.ipp.services.DataService;
import com.intuit.ipp.util.Config;

import java.util.List;

/**
 * Abstraction barrier for calling QuickBooks APIs
 *
 * @author skberkeley
 */
public class QuickBooksModule {
    /**
     * The base URL to use for API calls when in Sandbox mode
     */
    private static final String SANDBOX_BASE_URL = "https://sandbox-quickbooks.api.intuit.com/v3/company";
    /**
     * The DataService object used to make QuickBooks API calls
     */
    private final DataService dataService;

    /**
     * Creates a new QuickBooksModule object, instantiating a new DataService object in the process.
     * accessToken must be a valid value generated by some OAuth2 process.
     * realmId must be a valid value for some QuickBooks app.
     * @param accessToken The OAuth2 accessToken used to authenticate while instantiating the new DataService object
     * @param realmId The realmId for the QuickBooks app being used
     */
    public QuickBooksModule(String accessToken, String realmId, boolean useSandbox) {
        if (useSandbox) {
            Config.setProperty(Config.BASE_URL_QBO, SANDBOX_BASE_URL);
        }

        // Create OAuth2 object
        OAuth2Authorizer oAuth2Authorizer = new OAuth2Authorizer(accessToken);

        // Create QuickBooks context
        Context context;
        try {
            context = new Context(oAuth2Authorizer, ServiceType.QBO, realmId);
        } catch (FMSException e) {
            throw new QuickBooksException("Exception creating context for QuickBooksModule", e);
        }

        // Create QuickBooks DataService object
        this.dataService = new DataService(context);
    }

    public List<Customer> getAllCustomers() {
        Customer customer = new Customer();
        try {
            return this.dataService.findAll(customer);
        } catch (FMSException e) {
            throw new QuickBooksException("Exception getting all customers", e);
        }
    }
}
